{"version":3,"sources":["contexts/DeviceContext.js","rates_api/ratesFetcher.js","components/Loader.js","components/ErrorMessage.js","components/DeviceSelector.js","components/CurrencyConverter.js","App.js","index.js"],"names":["deviceContext","React","createContext","selectedDevice","changeDevice","device","fetchRate","setApiDevicesRates","setApiDown","setIsLoading","console","log","axios","get","params","base","access_key","process","then","response","data","success","rates","Promise","reject","catch","err","finally","Loader","props","CircularProgress","ErrorMessage","memo","useContext","DeviceContext","Select","labelId","id","value","onChange","Object","keys","devicesRates","map","deviceName","MenuItem","key","CurrencyConverter","useState","rate","deviceRate","setDeviceRate","apiDevicesRates","isLoading","isApiDown","userValue","setUserValue","convertedValue","setConvertedValue","fetchRates","apiFetcher","useEffect","className","Provider","event","target","Grid","container","direction","justify","alignItems","TextField","label","type","InputLabelProps","shrink","variant","fontSize","disabled","App","Card","CardContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4a5aa9c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst deviceContext = React.createContext({\n  selectedDevice: \"EUR\",\n  changeDevice: device => {},\n  fetchRate: (setApiDevicesRates, setApiDown, setIsLoading) => {} // fonction pour charger les device et taux de conversion\n});\n\nexport default deviceContext;\n","import axios from \"axios\";\n\n/**\n * charge les devises taux de conversion depuis l'API fixer.io\n *\n * @param setApiDevicesRates state hook setterà appeler pour fournir les taux de conversion\n * @param setApiDown state hook setter à appeler pour spécifier que l'API ne réponds pas\n * @param setIsLoading state hook setter à appeler pour spécifier que l'état du chargement\n */\nexport default (setApiDevicesRates, setApiDown, setIsLoading) => {\n  console.log(\"loading\");\n  axios\n    .get(\"http://data.fixer.io/api/latest\", {\n      params: {\n        base: \"EUR\",\n        access_key: process.env.REACT_APP_FIXER_API_KEY\n      }\n    })\n    .then(response => {\n      if (!response.data || !response.data.success || !response.data.rates) {\n        return Promise.reject(response);\n      }\n      setApiDevicesRates(response.data.rates);\n    })\n    .catch(err => {\n      console.log(\"fetching api error:\", err);\n      setApiDown(true);\n    })\n    .finally(() => setIsLoading(false));\n};\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nfunction Loader(props) {\n  return (\n    <div>\n      <CircularProgress />\n      <br />\n      Chargement des taux de change\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport BugReport from \"@material-ui/icons/BugReport\";\n\n// affiche un message d'erreur dans le cas ou l'API ne serait pas joinable\nfunction ErrorMessage(props) {\n  return (\n    <div>\n      <BugReport />\n      <br />\n      Impossible de charger les derniers taux de change.\n      <br />\n      Veuillez ré-essayer plutard\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { useContext, memo } from \"react\";\nimport DeviceContext from \"../contexts/DeviceContext\";\n\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\n// selecteur de devises:\n// permet à l'utilisateur de sélectionner la devise vers laquelle il souhaite convertir ses euros\nconst DeviceSelector = (props) => {\n  const deviceContext = useContext(DeviceContext);\n\n  return (\n    <Select\n      labelId=\"device-select-label\"\n      id=\"device-select-label\"\n      value={deviceContext.selectedDevice}\n      onChange={deviceContext.changeDevice}\n    >\n      {Object.keys(props.devicesRates).map(deviceName => (\n        <MenuItem key={deviceName} value={deviceName}>\n          {deviceName}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nexport default memo(DeviceSelector);\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport DeviceContext from \"../contexts/DeviceContext\";\nimport apiFetcher from \"../rates_api/ratesFetcher\";\n\nimport \"./CurrencyConverter.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SyncAlt from \"@material-ui/icons/SyncAlt\";\nimport Loader from \"./Loader\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport DeviceSelector from \"./DeviceSelector\";\n\nfunction CurrencyConverter() {\n  const [deviceRate, setDeviceRate] = useState({ device: \"EUR\", rate: 1 }); // devises et taux sélectionner pour convertir nos euros\n  const [apiDevicesRates, setApiDevicesRates] = useState({}); // liste des devises et des taux de change\n  const [isLoading, setIsLoading] = useState(true); // utilisé pour afficher un loader pendant la récupération des taux depuis l'API web\n  const [isApiDown, setApiDown] = useState(false); // dans le cas ou on n'arrive pas joindre l'API on affichera un message d'erreur\n  const [userValue, setUserValue] = useState(1); // valeur à convertir\n  const [convertedValue, setConvertedValue] = useState(0.9); // valeur une fois convertie\n\n  // l'utilisateur a sélectionné une devise vers laquelle convertir ses euros\n  const handleDeviceChange = event => {\n    setDeviceRate({\n      device: event.target.value,\n      rate: apiDevicesRates[event.target.value]\n    });\n  };\n\n  // l'utilisateur entre combien d'euro il veut convertir\n  const handleUserValueChange = event => {\n    setUserValue(event.target.value);\n  };\n\n  const fetchRates = () => {\n    apiFetcher(setApiDevicesRates, setApiDown, setIsLoading);\n  };\n\n  // on surveille:\n  // - la devise sélectionnée par l'utilisateur\n  // - la valeur en euro entrée par l'utilisateur\n  // en cas de changement on refait notre convertion avec le taux et la devise actuelle\n  useEffect(() => {\n    setConvertedValue(userValue * deviceRate.rate);\n  }, [deviceRate, userValue]);\n\n  // au chargement de notre composant :\n  // - on récupère les taux de change depuis l'API fixer.io\n  // - on actualise le state du composant (setDevicesRates, setApiDown, setIsLoading)\n  useEffect(() => {\n    fetchRates(); // allons chercher les devises et taux de change via l'API fixer.io\n  }, []);\n\n  if (isApiDown) {\n    return <ErrorMessage />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n\n  // on n'est pas en train de charger ? -> on affiche notre convertisseur\n  return (\n    <div className=\"currency-converter-wrapper\">\n      <DeviceContext.Provider\n        value={{\n          selectedDevice: deviceRate.device,\n          changeDevice: handleDeviceChange,\n          fetchRate: fetchRates\n        }}\n      >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <TextField\n            id=\"user-value\"\n            label=\"EUR\"\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true\n            }}\n            variant=\"outlined\"\n            value={userValue}\n            onChange={handleUserValueChange}\n            className=\"converter-input\"\n          />\n          <SyncAlt fontSize=\"large\" className=\"converting-icon\" />\n          <TextField\n            id=\"converted-value\"\n            label={deviceRate.device}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true\n            }}\n            disabled\n            variant=\"outlined\"\n            className=\"converter-input\"\n            value={convertedValue}\n          />\n        </Grid>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n          className=\"device-selector-grid\"\n        >\n          <div className=\"user-device-div\">Euro</div>\n          <DeviceSelector devicesRates={apiDevicesRates} />\n        </Grid>\n      </DeviceContext.Provider>\n    </div>\n  );\n}\n\nexport default CurrencyConverter;\n","import React from \"react\";\nimport \"./App.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CurrencyConverter from \"./components/CurrencyConverter\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Card>\n          <CardContent>\n            <h2>Convertisseur de devises</h2>\n            <CurrencyConverter />\n          </CardContent>\n        </Card>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}